Run postgres and attach volume to it
then we run the ingest_data script to load data into the postgres.
the volume will retain the data whenever we open the container!
    
docker run -it \
  -e POSTGRES_USER="root" \
  -e POSTGRES_PASSWORD="root" \
  -e POSTGRES_DB="ny_taxi"  \
  -v "$(pwd)"/ny_taxi_postgres_data:/var/lib/postgresql/data \
  -p 5432:5432 \
postgres:13


can we open a new container with the same volume mounted? yes.
docker run -it \
  -e POSTGRES_USER="root" \
  -e POSTGRES_PASSWORD="root" \
  -e POSTGRES_DB="ny_taxi"  \
  -v "$(pwd)"/ny_taxi_postgres_data:/var/lib/postgresql/data \
  -p 5432:5432 \
postgres:12


https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page

https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2021-01.parquet

-- RUNNING PGADMIN.
docker run -it \
  -e PGADMIN_DEFAULT_EMAIL="admin@admin.com" \
  -e PGADMIN_DEFAULT_PASSWORD="root" \
  -p 8080:80 \
  dpage/pgadmin4


docker pull dpage/pgadmin4


--- using a network to connect everything together
-- we need to connect the pgadmin container with the postgres container via networks

docker network create pg-network

-- full thing
docker run -it \
  -e POSTGRES_USER="root" \
  -e POSTGRES_PASSWORD="root" \
  -e POSTGRES_DB="ny_taxi"  \
  -v "$(pwd)"/ny_taxi_postgres_data:/var/lib/postgresql/data \
  -p 5432:5432 \
  --network=pg-network \
  --name pg-database \
postgres:13

-- then we can run pgcli -h localhost -p 5432 -u root -d ny_taxi to check if the data is still there

-- then do pgadmin wih the network connection

docker run -it \
  -e PGADMIN_DEFAULT_EMAIL="admin@admin.com" \
  -e PGADMIN_DEFAULT_PASSWORD="root" \
  -p 8080:80 \
  --network=pg-network \
  --name pgadmin \
  dpage/pgadmin4


-- then in pgadmin (localhost:8080) we put the hostname as pg-database because that is the network name that we used for postgres:13

-- notes on the full ingest_data script

python ingest_data.py \
    --user=root \
    --password=root \
    --host=localhost \
    --port=5432 \
    --db=ny_taxi \
    --table_name=yellow_taxi_trips \
    --url="https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2021-01.parquet"


---- END PRODUCT!!!!!
-- now using docker to run the entire pipeline
docker build -t taxi_ingest:v001 .

-- now have to pass in the parameters from before.
-- when using pg-network we will put in the host as pg-database

docker build -t taxi_ingest:v001 .

docker run -it \
  --network=pg-network \
  taxi_ingest:v001 \
    --user=root \
    --password=root \
    --host=pg-database \
    --port=5432 \
    --db=ny_taxi \
    --table_name=yellow_taxi_trips \
    --url="https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2021-01.parquet"


-- docker compose makes it part of the same network so they are all connexted automatically